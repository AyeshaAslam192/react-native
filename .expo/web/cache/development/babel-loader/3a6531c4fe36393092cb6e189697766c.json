{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ayesha/react-native-demo/react-native/src/components/common/Smart/AppForm/index.js\";\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTheme } from \"../../../../providers/themeProvider\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { detectLang } from \"../../../../helpers/localization/localization\";\nimport ScreenWrapper from \"../../../layouts/ScreenWrapper\";\nimport styles from \"./AppForm.styles\";\nimport { checkValidEmail } from \"../../../../helpers/utils/utils\";\nimport AppTextInput from \"../../Presentational/AppTextInput\";\nimport { fetchLoginCredentials } from \"../../../../store/login/loginActions\";\n\nvar AppForm = function AppForm(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      emailError = _useState6[0],\n      setEmailError = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      passwordError = _useState8[0],\n      setPasswordError = _useState8[1];\n\n  var dispatch = useDispatch();\n  var setConstants = detectLang().t;\n\n  var handleSubmit = function handleSubmit() {\n    if (!email || !checkValidEmail(email)) setEmailError('invalid email');\n    if (!password) setPasswordError('password should not be empty');\n    if (checkValidEmail(email)) setEmailError('');\n\n    if (password && checkValidEmail(email)) {\n      setPasswordError('');\n      setEmailError('');\n      var user = {\n        email: email,\n        password: password\n      };\n      dispatch(fetchLoginCredentials(user));\n    }\n  };\n\n  return React.createElement(ScreenWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: [styles.formHeading, {\n      color: colors.formHeader\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, setConstants('FORM')), React.createElement(View, {\n    style: styles.formView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, React.createElement(AppTextInput, {\n    placeholder: \"Email\",\n    password: false,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    txtColor: colors.formTxt,\n    placeholderColor: colors.placeholderTxt,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }), emailError != null && emailError.length ? React.createElement(Text, {\n    style: styles.errorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 41\n    }\n  }, emailError) : React.createElement(Text, {\n    style: {\n      display: 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 94\n    }\n  }), React.createElement(AppTextInput, {\n    placeholder: \"Password\",\n    password: true,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    txtColor: colors.formTxt,\n    placeholderColor: colors.placeholderTxt,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), passwordError != null && passwordError.length ? React.createElement(Text, {\n    style: styles.errorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 44\n    }\n  }, passwordError) : React.createElement(Text, {\n    style: {\n      display: 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 100\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.submitBtn,\n    onPress: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.submitText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\"))));\n};\n\nexport default AppForm;","map":{"version":3,"sources":["/home/ayesha/react-native-demo/react-native/src/components/common/Smart/AppForm/index.js"],"names":["React","useState","useDispatch","useTheme","detectLang","ScreenWrapper","styles","checkValidEmail","AppTextInput","fetchLoginCredentials","AppForm","navigation","colors","email","setEmail","password","setPassword","emailError","setEmailError","passwordError","setPasswordError","dispatch","setConstants","t","handleSubmit","user","formHeading","color","formHeader","formView","text","formTxt","placeholderTxt","length","errorText","display","submitBtn","submitText"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTheme } from \"../../../../providers/themeProvider\";\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { detectLang } from '../../../../helpers/localization/localization';\nimport ScreenWrapper from '../../../layouts/ScreenWrapper';\nimport styles from './AppForm.styles';\nimport { checkValidEmail } from '../../../../helpers/utils/utils';\nimport AppTextInput from '../../Presentational/AppTextInput';\nimport { fetchLoginCredentials } from '../../../../store/login/loginActions';\n\nconst AppForm = ({navigation}) => {\n    const { colors } = useTheme();\n    const [email, setEmail] =  useState('');\n    const [password, setPassword] = useState('');\n    const [emailError, setEmailError] = useState('');\n    const [passwordError, setPasswordError] = useState('');\n    const dispatch = useDispatch();\n    const setConstants = detectLang().t;\n\n    const handleSubmit= () => {\n        if(!email || !checkValidEmail(email)) setEmailError('invalid email');\n        if(!password) setPasswordError('password should not be empty');\n        if(checkValidEmail(email)) setEmailError('');\n        if(password && checkValidEmail(email)) \n        { \n            setPasswordError('');\n            setEmailError('');\n            const user = {\n                email: email,\n                password: password,\n            }\n           dispatch(fetchLoginCredentials(user));\n        }\n        \n   }\n\n    return (\n        <ScreenWrapper>\n            <Text style={[styles.formHeading, {color: colors.formHeader}]}>{setConstants('FORM')}</Text>\n            <View style={styles.formView}>\n                <AppTextInput \n                    placeholder=\"Email\" \n                    password={false} \n                    onChangeText={text => setEmail(text)}\n                    txtColor={colors.formTxt} \n                    placeholderColor={colors.placeholderTxt} \n                />\n                { emailError?.length ?  <Text style={styles.errorText}>{emailError}</Text> : <Text style={{display: 'none'}}></Text> }\n                <AppTextInput \n                    placeholder=\"Password\" \n                    password={true} \n                    onChangeText={text => setPassword(text)}\n                    txtColor={colors.formTxt} \n                    placeholderColor={colors.placeholderTxt} \n                />\n                { passwordError?.length ?  <Text style={styles.errorText}>{passwordError}</Text> : <Text style={{display: 'none'}}></Text> }\n                <TouchableOpacity \n                    style={styles.submitBtn} \n                    onPress={handleSubmit} \n                >\n                    <Text style={styles.submitText}>SUBMIT</Text>\n                </TouchableOpacity>\n            </View>\n        </ScreenWrapper>\n    );\n}\n\nexport default AppForm;"]},"metadata":{},"sourceType":"module"}